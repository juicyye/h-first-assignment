/*
package hello.firstassignment.mock;

import hello.firstassignment.item.domain.Item;
import hello.firstassignment.item.service.port.ItemRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeItemRepository implements ItemRepository {
    private List<Item> data = new ArrayList<>();
    private AtomicLong autoGeneratedId = new AtomicLong(0);
    @Override
    public Item save(Item item) {
        if(item.getId() == null || item.getId() == 0) {
            Item newItem = Item.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(item.getTitle())
                    .content(item.getContent())
                    .username(item.getUsername())
                    .price(item.getPrice())
                    .createdAt(item.getCreatedAt())
                    .updatedAt(item.getUpdatedAt())
                    .build();
            data.add(newItem);
            return newItem;
        } else{
            data.removeIf(i -> Objects.equals(i.getId(), item.getId()));
            data.add(item);
            return item;
        }
    }

    @Override
    public List<Item> findAll() {
        return data;
    }

    @Override
    public Optional<Item> findById(Long id) {
        return data.stream().filter(i -> Objects.equals(i.getId(), id)).findFirst();
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(i -> Objects.equals(i.getId(), id));
    }
}
*/
